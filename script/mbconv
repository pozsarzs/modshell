#!/usr/local/bin/modshell -r
# +----------------------------------------------------------------------------+
# | ModShell 0.1 * Command-driven scriptable Modbus utility                    |
# | Copyright (C) 2023-2024 Pozsar Zsolt <pozsarzs@gmail.com>                  |
# | mbconv                                                                     |
# | MBConv v0.1 * Modbus register number/address converter utilitys            |
# +----------------------------------------------------------------------------+

# VARIABLES AND CONSTANTS
# general variables
var b
var i
var valid 0
var address
# messages
varr msg 16
  let msg[0] MBConv\ v0.1\ *\ Modbus\ register\ number/address\ converter\ utility
  let msg[1] (C)\ 2024\ Pozsar\ Zsolt\ <http://www.pozsarzs.hu>
  let msg[2] Usage:
  let msg[3] \ \ register_number
  let msg[4] \ \ d|c|i|h\ address
  let msg[5] discrete\ output\ coils
  let msg[6] discrete\ input\ contacts
  let msg[7] analog\ input\ registers
  let msg[8] analog\ output\ holding\ registers
  let msg[9] -\ register\ number:\ \ X
  let msg[10] -\ register\ type:\ \ \ \ X
  let msg[11] -\ register\ address:\ X
  let msg[12] ERROR:
  let msg[13] \ The\ register\ type\ can\ be\ c,\ d,\ i\ and\ h.
  let msg[14] \ The\ address\ can\ be\ 0-9998.
  let msg[15] \ The\ register\ number\ can\ be\ 1-9999,\ 10001-19999,\ 30001-39999\ and\ 40001-49999.
# register types
const OFFSET 10000
carr REGTYPE 4
  let $REGTYPE[0] c
  let $REGTYPE[1] d
  let $REGTYPE[2] i
  let $REGTYPE[3] h

# MAIN
# print header and select operation mode
if $ARGCNT < 1 then goto usage
print $msg[0]
print $msg[1]
print "\ "
if $ARGCNT = 1 then goto num2addr
if $ARGCNT > 1 then goto addr2num

# convert register number to address
label num2addr
  # check register number
  if $ARG1 => 1 then if $ARG1 <= 9999 then let $valid 10
  if $ARG1 => 10001 then if $ARG1 <= 19999 then let $valid 11
  if $ARG1 => 30001 then if $ARG1 <= 39999 then let $valid 12
  if $ARG1 => 40001 then if $ARG1 <= 49999 then let $valid 13
  if $valid = 0 then goto bad_regnum
  goto $valid
  label 10
    print $valid
    exit
  label 11
    print $valid
    exit
  label 12
    print $valid
    exit
  label 13
    print $valid
    exit
  label bad_regnum
    concat $msg[12] $msg[12] $msg[15]
    print $msg[12]
    exit

# convert address to register number
label addr2num
  # check register type
  for $b 0 to 3 do if $ARG1 == $REGTYPE[$b] then let $valid 1
  if $valid = 0 then goto bad_regtype
  # check address
  let $valid 0
  if $ARG2 => 0 then if $ARG2 <= 9998 then let $valid 0
  if $valid = 0 then goto bad_address
  # primary operation
  strrepl $msg[11] X $ARG2
  print $msg[11]
  for $b 0 to 3 do if $ARG1 == $REGTYPE[$b] then goto $b
  label 0
    let $b 0
    add $i 5 $b
    strrepl $msg[10] X $msg[$i]
    print $msg[10]
    mul $address 10000 $b
    add $address $address 1
    add $address $address $ARG2
    strrepl $msg[9] X $address
    print $msg[9]
    exit
  label 1
    let $b 1
    add $i 5 $b
    strrepl $msg[10] X $msg[$i]
    print $msg[10]
    mul $address 10000 $b
    add $address $address 1
    add $address $address $ARG2
    strrepl $msg[9] X $address
    print $msg[9]
    exit
  label 2
    let $b 3
    add $i 4 $b
    strrepl $msg[10] X $msg[$i]
    print $msg[10]
    mul $address 10000 $b
    add $address $address 1
    add $address $address $ARG2
    strrepl $msg[9] X $address
    print $msg[9]
    exit
  label 3
    let $b 4
    add $i 4 $b
    strrepl $msg[10] X $msg[$i]
    print $msg[10]
    mul $address 10000 $b
    add $address $address 1
    add $address $address $ARG2
    strrepl $msg[9] X $address
    print $msg[9]
    exit
  label bad_address
    concat $msg[12] $msg[12] $msg[14]
    print $msg[12]
    exit
  label bad_regtype
    concat $msg[12] $msg[12] $msg[13]
    print $msg[12]
    exit

# print usage
label usage
  strins $msg[3] 2 $ARG0
  strins $msg[4] 2 $ARG0
  print $msg[2]
  print $msg[3]
  print $msg[4]
  exit
