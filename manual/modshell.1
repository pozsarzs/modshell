.TH ModShell 1 "2023 December 20" ""
.SH NAME
modshell \- Command-driven scriptable Modbus utility
.SH SYNOPSIS
.B modshell
[options]
.SH COPYRIGHT
ModShell is Copyright (C) 2023 by Pozsar Zsolt.
.SH DESCRIPTION
This is a utility that can be used on several operating systems, which can
communicate with connected equipment using Modbus/ASCII, Modbus/RTU and
Modbus/TCP protocols. The program is designed for DOS, Windows and Unix-like
operating systems.
.SH OPTIONS
.TP
.B \-f \-\-fullscreen
Start in full screen mode.
.TP
.B \-h \-\-help
Write useable parameters.
.TP
.B \-r \-\-run script
Run a script.
.TP
.B \-v \-\-version
Write version and build information.
.SH OPERATION
The program can - even automatically - read, write or copy data from one device
to another (e.g. transferring settings). When copying, the source and
destination register areas can be different.
.PP
The program has a traditional (CLI) or full-screen (TUI) command-line interface
and is also suitable for running pre-created scripts independently (as a command
interpreter). The program provides help on the commands that can be used, and
offers possible values when the parameters are entered incorrectly. The issued
commands are placed in history, which can be browsed with the up/down arrow keys.
.SS Operating principle
It must be defined the I/O devices, then the protocols and the connections.
There can be eight of each. The data traffic takes place between the preset
connections. In all cases, the data is sent to or read from the internal buffer.
The size of the buffer is suitable for storing 2*9999 logical and word values of
the same size. Sixty-four variables can be created in the program, to which we
can assign a value of any type (eg.: message, boolean or integer register
value, etc.) Variables can be used to perform logical and basic mathematical
operations, and can be used to pass values to commands.
.SS Projects
In the program, you can create projects for easier management of settings and
data. The name of the current project is shown in the prompt. The project
directory will be created in the program directory on DOS, and in the ModShell
directory in the user's home directory on all other systems. If only filename
is specified during file operations (without path), this directory will be the
source/destination directory.
.SS File operations
The command line history can be exported to a text file and provides it with the
appropriate 'shebang' for all operating system. You can easily create a script
from this raw file.
.PP
Device, protocol and connection settings can be saved and loaded in their own
format. During saving, three typed files are created, with the following
extensions: DDT, PDT, CDT.
.PP
All register values can be saved and loaded in their own format. During saving,
two typed files are created, with the following extensions: BDT, WDT.
.PP
One or more same type registers can be exported to file. During saving, one text
file is created, with CSV, INI or XML extension.
.PP
The program has a simple serial console whose traffic is logged in the project
directory as console.log.
.PP
On exit, the command line history, echo mode and colors are preserved.
.SH BUILTIN COMMANDS
Notes:
  - register: local buffer register;
  - remote register: register of the connected device;
  - The '$' sign indicates a variable not a direct value.
.SS General commands
.TP
\fBcls\fP
Clear screen.
.TP
\fBcolor\fP \fI[$]FOREGROUND\fP \fI[$]BACKGROUND\fP \fI[$]RXD_TEXT\fP \fI[$]TXD_TEXT\fP 
Set foreground and background color in full screen mode.
.EX

\fIColors:\fP
0: black  4: red         8: darkgray    12: lightred
1: blue   5: magenta:    9: lightblue   13: lightmagenta
2: green  6: brown      10: lightgreen  14: yellow
3: cyan   7: lightgray  11: lightcyan   15: white
.EE
.TP
\fBdate\fP
Show system date and time.
.TP
\fBecho\fP [\fIoff\fP|\fIon\fP|\fIhex\fP]
Query local echo status or enable/disable it for serial connections.
Hex means the hexadecimal representation of the bytes.
.TP
\fBexit\fP
Exit from program.
.TP
\fBhelp\fP
Show description or usage of the builtin commands.
.TP
\fBpause\fP \fI[[$]TIME]\fP
Wait for a keystroke or specified time.
.TP
\fBprint\fP \fIdinp\fP|\fIcoil\fP|\fIireg\fP|\fIhreg\fP \fI[$]ADDRESS\fP [\fI[$]COUNT\fP]
Print content of the one or more registers. Register start \fIADDRESS\fP and
the \fICOUNT\fP must be between 1-9999.
.TP
\fBprint\fP \fI$VARIABLE\fP
Print value of the \fI$VARIABLE\fP.
.TP
\fBprint\fP "\fImessage\fP"
Print a single line message.
.TP
\fBvar\fP
Print all defined variables with their values.
.TP
\fBvar\fP \fIVARIABLE\fP [\fI[$]VALUE\fP]
Define new variable (\fVARIABLE\fP) and assign value (\fIVALUE\fP).
Use a backslash before a space.
.TP
\fBver\fP
Show version and build information of this program.
.SS Logical commands
.TP
\fBand\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Performs the AND operation between the two values or variables
(\fI[$]VALUE1\fP \fI[$]VALUE2\fP) and the result is placed in
\fI$TARGET\fP.
.TP
\fBor\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Performs the OR operation between the two values or variables
(\fI[$]VALUE1\fP \fI[$]VALUE2\fP) and the result is placed in
\fI$TARGET\fP.
.TP
\fBnot\fP \fI$TARGET\fP \fI[$]VALUE\fP
Performs the NOT operation on value or variable (\fI[$]VALUE\fP)
and the result is placed in \fI$TARGET\fP.
.TP
\fBxor\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Performs the XOR operation between the two values or variables
(\fI[$]VALUE1\fP \fI[$]VALUE2\fP) and the result is placed in
\fI$TARGET\fP.
.TP
\fBshl\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Shifts bits of the \fI[$]VALUE1\fP to the left by position
\fI[$]VALUE2\fP and the result is placed in \fI$TARGET\fP.
.TP
\fBshr\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Shifts bits of the \fI[$]VALUE1\fP to the right by position
\fI[$]VALUE2\fP and the result is placed in \fI$TARGET\fP.
.SS Mathematical commands
\fBadd\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Adds the two values or variables (\fI[$]VALUE1\fP \fI[$]VALUE2\fP)
and the result is placed in \fI$TARGET\fP.
.TP
\fBconv\fP \fIbin\fP|\fIdec\fP|\fIhex\fP|\fIoct\fP \fIbin\fP|\fIdec\fP|\fIhex\fP|\fIoct\fP \fI[$]VALUE\fP
convert numbers between binary, decimal, hexadecimal and octal numeral system.
\fIVALUE\fP must be between 0 and 65535
.TP
\fBdiv\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Divide \fI[$]VALUE1\fP by \fI[$]VALUE2\fP and the result
is placed in \fI$TARGET\fP. (integer division)
.TP
\fBmul\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Multiply the two two values or variables (\fI[$]VALUE1\fP \fI[$]VALUE2\fP)
and the result is placed in \fI$TARGET\fP.
.TP
\fBsub\fP \fI$TARGET\fP \fI[$]VALUE1\fP \fI[$]VALUE2\fP
Substract \fI[$]VALUE2\fP from \fI[$]VALUE1\fP and the result
is placed in \fI$TARGET\fP.
.SS Configuration commands
.TP
\fBget\fP \fIdev?\fP|\fIpro?\fP|\fIcon?\fP|\fIprj\fP
Get configuration of a device (\fIdev?\fP), protocol (\fIpro?\fP) or connection
(\fIcon?\fP), or get project name (\fIprj\fP). ? number must be 0-7.
.TP
\fBreset\fP \fIdev?\fP|\fIpro?\fP|\fIcon?\fP|\fIprj\fP
Reset configuration of a device (\fIdev?\fP), protocol (\fIpro?\fP) or connection
(\fIcon?\fP), or reset project name (\fIprj\fP). ? number must be 0-7.
.TP
\fBset\fP \fIdev?\fP \fInet\fP \fI[$]DEVICE\fP \fI[$]PORT\fP
Set device (\fIdev?\fP) to ethernet (\fInet\fP) device. Device number must be
between 0-7 and port number must be between 0-65535. The \fIDEVICE\fP name on
DOS is always PACKET, on other systems is the name of the adapter (e.g. eth0,
nfe0, etc.).
.TP
\fBset\fP \fIdev?\fP \fIser\fP \fI[$]DEVICE\fP \fI[$]BAUDRATE\fP \fI[$]DATABIT\fP \fI[$]PARITY\fP \fI[$]STOPBIT\fP
Set device (\fIdev?\fP) to serial (\fIser\fP) device. Device number must be
between 0-7. The \fIDEVICE\fP name is the name of the adapter (e.g. com1, ttyS0,
ttyUSB0, ttyAMA0 etc.). \fIBAUDRATE\fP must be: 1200; 2400; 4800; 9600; 19200;
38400; 57600 or 115200. \fIDATABIT\fP must be 7 or 8, \fIPARITY\fP must be E/N/O
(even/none/odd). \fISTOPBIT\fP must be 1 or 2.
.TP
\fBset\fP \fIpro?\fP \fIascii\fP|\fIrtu\fP \fI[$]UID\fP
Set protocol (\fIpro?\fP) to Modbus/ASCII (\fIascii\fP) or Modbus/RTU (\fIrtu\fP).
Unit ID (\fIUID\fP) must be between 1-247.
.TP
\fBset\fP \fIpro?\fP \fItcp\fP \fI[$]IP_ADDRESS\fP
Set protocol (\fIpro?\fP) to Modbus/TCP (\fItcp\fP). Address of remote device
(\fIIP_ADDRESS\fP) must be in a.b.c.d format, with values between 1-255.
.TP
\fBset\fP \fIcon?\fP \fIdev?\fP \fIpro?\fP
Assigns a device (\fIdev?\fP) and a protocol (\fIpro?\fP) to a connection
(\fIcon?\fP). ? number must be 0-7.
.TP
\fBset\fP \fIprj\fP [$]PROJECT_NAME
Set the project name. The name cannot contain spaces or special characters.
The project directory will also be created with this name.
.SS Data handler commands
.TP
\fBdump\fP [\fI[dinp|coil|ireg|hreg] [$]ADDRESS\fP]
Dump one page register content from \fIADDRESS\fP in binary/hexadecimal format
to a table.
.TP
\fBlet\fP \fIdinp\fP|\fIcoil\fP|\fIireg\fP|\fIhreg\fP \fI[$]ADDRESS\fP \fI[$]VALUE\fP
Set value of a register. Register start address must be between 1-9999.
If register type is discrete input (\fIdinp\fP) and coil
(\fIcoil\fP), \fIVALUE\fP must be 0/1, l/h or false/true. If it is input register
(\fIireg\fP) or holding register (\fIhreg\fP), \fIVALUE\fP must be 0-65535.
.TP
\fBlet\fP \fI$VARIABLE\fP \fI[$]VALUE\fP
Set value of a variable \fI$VARIABLE\fP to value \fI[$]VALUE\fP.
.TP
\fBlet\fP \fI$VARIABLE\fP \fIdinp\fP|\fIcoil\fP|\fIireg\fP|\fIhreg\fP \fI[$]ADDRESS\fP
Set value of a variable \fI$VARIABLE\fP from register content. Register start address
and must be between 1-9999, If register type is discrete input (\fIdinp\fP) and coil
(\fIcoil\fP), value will be 0/1, if it is input register
(\fIireg\fP) or holding register (\fIhreg\fP), value of the variable will be 0-65535.
.SS Communication commands
.TP
\fBread\fP \fIcon?\fP \fIdinp\fP|\fIcoil\fP|\fIireg\fP|\fIhreg\fP \fI[$]ADDRESS\fP [\f[$]ICOUNT\fP]
Read one or more remote registers. Number of connection (\fIcon?\fP)
must be between 0-7, register start \fIADDRESS\fP and the \fICOUNT\fP must be
between 1-9999.
.TP
\fBwrite\fP \fIcon?\fP \fIcoil\fP|\fIhreg\fP \fI[$]ADDRESS\fP [\fI[$]COUNT\fP]
Write data to one or more remote registers. Number of connection
(\fIcon?\fP) must be between 0-7, register start address and the count must be
between 1-9999.
.TP
\fBcopy\fP \fIcon?\fP \fIdinp\fP|\fIcoil\fP \fIcon?\fP \fIcoil?\fP \fI[$]ADDRESS\fP [\fI[$]COUNT\fP]
Copy logical data between connections (\fIcon?\fP). Number of connection
(\fIcon?\fP) must be between 0-7, register start \fIADDRESS\fP and the
\fICOUNT\fP must be between 1-9999.
.TP
\fBcopy\fP \fIcon?\fP \fIireg\fP|\fIhreg\fP \fIcon?\fP \fIhreg?\fP \fI[$]ADDRESS\fP [\fI[$]COUNT\fP]
Copy numeral data between connections (\fIcon?\fP). Number of connection
(\fIcon?\fP) must be between 0-7, register start \fIADDRESS\fP and the
\fICOUNT\fP must be between 1-9999.
.TP
\fBsercons\fP \fI[dev?]\fP
Open a simple serial console. Data traffic is logged to the project directory
named \fIconsole.log\fP. Number of device (\fIdev?\fP) must be between 0-7.
.TP
\fBserread\fP \fI[dev?]\fP \fI[$TARGET]\fP
Read string from serial device to variable \fI$TARGET\fP or write screen.
Number of device (\fIdev?\fP) must be between 0-7.
.TP
\fBserwrite\fP \fI[dev?]\fP \fI$MESSAGE\fP
Write string to serial device from \fI$MESSAGE\fP.
Number of device (\fIdev?\fP) must be between 0-7.
.TP
\fBserwrite\fP \fI[dev?]\fP \fI"MESSAGE"\fP
Write "MESSAGE" to serial device. Number of device (\fIdev?\fP) must be between 0-7.
.SS File operation command
The specified parameter does not contain a path, the file will be saved in the
project directory in the user's home directory (on DOS, in project directory
in the program directory).
.TP
\fBexphis\fP \fI[$]PATH_AND_FILENAME\fP
Export command line history to a text file.
.TP
\fBexpreg\fP \fI[$]PATH_AND_FILENAME\fP \fIdinp\fP|\fIcoil\fP|\fIireg\fP|\fIhreg\fP \fI[$]ADDRESS\fP [\fI[$]COUNT\fP]
Export content of the one or more registers to a text file in CSV, INI
or XML format. The file format is specified by the destination file extension.
If the file exists, it will overwrite or append the new data.
.TP
\fBimpreg\fP \fI[$]PATH_AND_FILENAME\fP
Import content of the one or more registers from a text file in CSV, INI
or XML format. The file format is specified by the destination file extension.
.TP
\fBloadcfg\fP \fI[$]PATH_AND_FILENAME\fP
Load settings of device, protocol and connection from own format files.
.TP
\fBloadreg\fP \fI[$]PATH_AND_FILENAME\fP
Load all registers from own format files.
.TP
\fBsavecfg\fP \fI[$]PATH_AND_FILENAME\fP
Save settings of device, protocol and connection to four typed files.
.TP
\fBsavereg\fP \fI[$]PATH_AND_FILENAME\fP
Save all registers to four typed files.
.SH EXAMPLES
.SS General commands
.TP
\fBecho\fP
Query local echo status.
.TP
\fBecho\fP on
Enable local echo it for serial connections.
.TP
\fBecho\fP hex
Enable local echo with hexadecimal representation of the bytes.
.TP
\fBhelp\fP
Show short description of the useable commands.
.TP
\fBhelp\fP set
Show usage of help command.
.TP
\fBpause\fP
Wait for a key press.
.TP
\fBpause\fP 5
Wait for 5 sec.
.TP
\fBpause\fP $time
Wait for value of the $time sec.
.TP
\fBprint\fP $a
Print value of the $a variable.
.TP
\fBprint\fP "Hello\ world!"
Print 'Hello world!' message.
.TP
\fBvar\fP A 12
Define $a variable and assign 12 value to it.
.TP
\fBvar\fP B $a
Define $b variable and assign value of the $a.
.SS Logical commands
.TP
\fBand\fP $result 1234 1345
Performs AND operation with 1234 and 1345, and the
result is placed in $result.
.TP
\fBor\fP $result 1234 $b
Performs OR operation with 1234 and $b, and the
result is placed in $result.
.TP
\fBnot\fP $result $a
Performs negation on 1234 and the
result is placed in $result.
.TP
\fBshr\fP $result $source $shift
Shifts bits of the $source to the left by position
$shift and the result is placed in $result.
.SS Mathematical commands
.TP
\fBadd\fP $result 12 13
Adds 12 and 13, and the result is placed in $result.
.TP
\fBconv\fP bin hex 1011000010110100
Convert 45236 in binary to hex (result: B0B4).
.TP
\fBconv\fP hex dec $I
Convert value of the $I in hexadecimal to decimal.
.TP
\fBsubs\fP $result 12 13
Substract 13 from 12, and the result is placed in $result.
.SS Configuration commands
.TP
\fBget\fP dev2
Get configuration of a device #2.
.TP
\fBreset\fP prj
Reset project name (project name will be 'default').
.TP
\fBset\fP dev0 net /dev/enp0s7 502
Set device #0 to '/dev/enp0s7' ethernet device with 502 port.
.TP
\fBset\fP dev0 net /dev/enp0s7 $P
Set device #0 to '/dev/enp0s7' ethernet device with value of the $P port.
.TP
\fBset\fP dev1 ser ttyS0 9600 8 N 1
Set device #1 to /dev/ttyS0 serial device, with 9600 baud, 8 databits,
without parity check and 1 stopbit.
.TP
\fBset\fP dev1 ser COM1 9600 8 N 1
Set device #1 to COM1 serial device, with 9600 baud, 8 databits,
without parity check and 1 stopbit.
.TP
\fBset\fP dev1 ser $p $s $d $p $t
Set device #1 to $p serial device, with $s baud, $d databits, $p
parity check and $t stopbit.
.TP
\fBset\fP pro0 ascii 100
Set protocol #0 to Modbus/ASCII with 100 unit ID (slave).
.TP
\fBset\fP pro2 tcp 192.168.100.2
Set protocol #2 to Modbus/TCP with IP address of server.
.TP
\fBset\fP con0 dev0 pro2
Assigns a device #0 and protocol #2 to connection #0.
.TP
\fBset\fP prj temp_meter
Set the project name to 'temp_meter'.
.SS Data handler commands
.TP
\fBdump\fP
Start dump with requesting register type and start address.
.TP
\fBdump\fP hreg 1121
Start discrete input register dump from address 1121.
.TP
\fBlet\fP dinp 10 1
Set value of the discrete input register address 10 to 1.
.TP
\fBlet\fP dinp 10 true
Set value of the discrete input register address 10 to 1.
.TP
\fBlet\fP dinp 10 H
Set value of the discrete input register address 10 to 1.
.TP
\fBlet\fP ireg 10 65535
Set value of the input register address 10 to 65535.
.TP
\fBlet\fP ireg $a $b
Set value of the input register (address value of the $a) to value of the $b.
.TP
\fBlet\fP $a ireg 100
Set $a to input register address 100.
.TP
\fBlet\fP $a 10
Set $a variable to 10.
.TP
\fBlet\fP $a $b
Set $a variable to value of $b.
.TP
\fBprint\fP ireg 10 10
Print value of the input register address 10 to 20.
.TP
\fBprint\fP ireg $a $b
Print value of the input register address value of $a to value of $b.
.SS Communication commands
.TP
\fBread\fP con0 hreg 100 15
Read remote holding registers of the connection #0 from address 100 to 115.
.TP
\fBread\fP con0 hreg $a 15
Read remote holding registers of the connection #0 from address value of the $a to $a+15.
.TP
\fBwrite\fP con2 coil 10
Write data from to coil address 10 of the connection #2.
.TP
\fBwrite\fP con2 coil $c
Write data from to coil address value of the $c of the connection #2.
.TP
\fBcopy\fP con0 ireg con2 hreg 210 10
Copy input register content of the connection #0 to holding register content of the
connection #2 from address 210 to 220.
.TP
\fBcopy\fP con0 ireg con2 hreg $a $b
Copy input register content of the connection #0 to holding register content of the
connection #2 from address value of the $a to $a+$b.
.TP
\fBsercons\fP
Open serial console with requesting device number.
.TP
\fBsercons\fP dev0
Open serial console with dev0 device.
.TP
\fBserread\fP dev0
Read string from dev0 device and write to screen.
.TP
\fBserread\fP dev0 $target
Read string from dev0 device and write to $target variable.
.TP
\fBserwrite\fP dev0 "The\ quick\ brown\ fox\ jumps\ over\ the\ lazy\ dog."
Write string to dev0 device.
.TP
\fBserwrite\fP dev0 "$message"
Write string from $message variable to dev0 device.
.SS File operation command
.TP
\fBexphis\fP script
Export command line history to project directory.
.TP
\fBexpreg\fP discrete_inputs.csv dinp 100 15
Export values of discrete input register from address 100 to 115
to CSV file.
.TP
\fBimpreg\fP discrete_inputs.xml
Import values from a XML file. The target and range are determined by the
contents of the file.
.TP
\fBloadcfg\fP test1
Load settings of device, protocol and connection from project directory.
.TP
\fBloadreg\fP /home/username/Desktop/test1
Load all registers from other directory.
.TP
\fBsavecfg\fP test1
Save settings of device, protocol and connection to project directory.
.TP
\fBsavereg\fP /home/username/Desktop/test1
Save all registers to other directory.
.SH HOTKEYS
Commands with function keys (\fBF?\fP) are executed immediately,
modifier keys (\fBALT\fP-\fB?\fP) only make typing easier.
.TP
\fBF1\fP
help command
.TP
\fBF2\fP
savecfg command
.TP
\fBF3\fP
loadcfg command
.TP
\fBF4\fP
savereg command
.TP
\fBF5\fP
loadreg command
.TP
\fBF6\fP
dump command
.TP
\fBF7\fP
sercons command
.TP
\fBF8\fP
cls command
.TP
\fBF9\fP
echo swap command
.TP
\fBF10\fP
exit command
.TP
\fBALT\fP-\fBC\fP
conv command
.TP
\fBALT\fP-\fBE\fP
expreg command
.TP
\fBALT\fP-\fBG\fP
get command
.TP
\fBALT\fP-\fBI\fP
impreg command
.TP
\fBALT\fP-\fBL\fP
let command
.TP
\fBALT\fP-\fBP\fP
print command
.TP
\fBALT\fP-\fBR\fP
read command
.TP
\fBALT\fP-\fBT\fP
reset command
.TP
\fBALT\fP-\fBS\fP
set command
.TP
\fBALT\fP-\fBW\fP
write command
.SH ENVIRONMENTAL VARIABLES
.TP
.B LANG
This is the system language on DOS and Unix-like operating systems.
.TP
.B PKTDRVINT
To access the network on DOS, the packet driver of the network card is
required. It uses an x86 interrupt number (INT) between 0x60 and 0x80. This
variable tells the program this value. If there is no or it is empty, then
the default 0x60 will be used.
.SH FILES
.TP
.B modshell.ini
General configuration file in user's directory on Windows or Unix-like system
or in the settings folder of the program on DOS.
.TP
.B console.log
Serial console traffic.
.TP
.B scriptfiles[.bat]
The script file is used for batch execution of ModShell commands. The commands
must be entered in the same form as if we were working in the built-in command
line. If the first valuable character (not a space or tab) of a line is a hash,
then that line is not interpreted. You can find examples in the documents library.

A simple example on Unix-like OS:

.EX
#!/usr/local/bin/modshell -r

# Example script * use of variables
print "Example\ script\ -\ How\ to\ use\ variables?"
print "--------------------------------------------"
var a 24
var b
var c 
let $b 2
 (...)
print "The\ sum\ of\ $A\ and\ $B:"
print "--------------------------------------------"
.EE

A simple example on DOS and Windows OS:

.EX
@modshell.exe -r %0
@goto :eof

# Example script * use of variables
print "Example\ script\ -\ How\ to\ use\ variables?"
print "--------------------------------------------"
var a 24
var b
var c 
let $b 2
 (...)
print "The\ sum\ of\ $A\ and\ $B:"
print "--------------------------------------------"

:eof
.EE

.TP
.B "*.DDT"
Saved device setting in typed file with seven TDevice type values.
.EX
type TDevice = record
       valid: boolean;     // settings validity: false|true
       devtype: byte;      // type of device: 0..1 -> see DEV_TYPE
       device: string[15]; // device: /dev/ttySx, COMx, /dev/eth0 etc.
       port: word;         // ethernet port: 0-65535
       speed: byte;        // serial speed: 0..7 -> see DEV_SPEED
       databit: byte;      // serial databits: 7|8
       parity: byte;       // serial parity: 0..2 -> see DEV_PARITY
       stopbit: byte;      // serial stopbit: 1|2
     end;
.EE
.TP
.B "*.PDT"
Saved protocol setting in typed file with seven TProtocol type values.
.EX
type TProtocol = record
       valid: boolean;        // settings validity: false|true
       prottype: byte;        // type of protocol: 0..2 -> see PROT_TYPE
       ipaddress: string[15]; // IP address in a.b.c.d format
       uid: integer;          // Modbus Unit ID: 1..247
     end;
.TP
.B "*.CDT"
Saved connection setting in typed file with seven TConnection type values.
.EX
type TConnection = record
       valid: boolean;        // settings validity: false|true
       dev: byte;             // assigned device: 0..7
       prot: byte;            // assigned protocol: 0..7
     end;
.EE
.TP
.B "*.BDT"
Saved boolean type register values in typed file with 2x9999 boolean values.
.TP
.B "*.WDT"
Saved word type register values in typed file with 2x9999 word values.
.TP
.B "*.CSV"
Exported boolean or word type register values in CSV text file. Cannot be imported.
Internal structure:
.EX
  dinp,1,0
      ...
  dinp,9999,1
  coil,1,0
      ...
  coil,9999,1
  ireg,1,102
      ...
  ireg,9999,33332
  hreg,1,5342
      ...
  hreg,9999,12
.EE
.TP
.B "*.INI"
Exported register values in INI text file in this structure:
.EX
  [dinp]
  addr_1=0
    ...
  addr_9999=1

  [coil]
  addr_1=0
    ...
  addr_9999=1

  [ireg]
  addr_1=102
    ...
  addr_9999=33332

  [hreg]
  addr_1=5342
    ...
  addr_9999=12
.EE
.TP
.B "*.XML"
Exported register values in XML text file in this structure:
.EX
  <?xml version="1.0" encoding="utf-8"?>
  <xml>
    <dinp>
      <reg addr="1">0</reg>
              ...
      <reg addr="9999">1</reg>
    </dinp>
    <coil>
      <reg addr="1">0</reg>
              ...
      <reg addr="9999">1</reg>
    </coil>
    <ireg>
      <reg addr="1">102</reg>
              ...
      <reg addr="33332">1</reg>
    </ireg>
    <hreg>
      <reg addr="1">5342</reg>
              ...
      <reg addr="33332">12</reg>
    </hreg>
  </xml>
.EE
.SH EXIT STATUS
.TP
.B 0
Normal exit.
.TP
.B 1
Terminal size is smaller than 80x25 characters.
.TP
.B 2
The specified script file does not exist.
.TP
.B 3
The specified script file cannot be loaded.
.TP
.B 4
Script buffer is full.
.SH HOMEPAGE
.UR http://www.pozsarzs.hu
.UE
.PP
.UR https://github.com/pozsarzs/modshell
.UE
.SH SEE ALSO
.PD 0
.LP
Files in document or /usr/share/doc/modshell/ folder (or equivalent on your system).
.SH AUTHOR
Pozsar Zsolt
.MT pozsarzs@gmail.com
.ME
