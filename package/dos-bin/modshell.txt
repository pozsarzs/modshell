ModShell(1)                      General Commands Manual                      ModShell(1)

NAME
       modshell - Command-driven scriptable Modbus utility

SYNOPSIS
       modshell [options]

COPYRIGHT
       ModShell is Copyright (C) 2023-2025 by Pozsar Zsolt.

DESCRIPTION
       This  is a utility that can be used on several operating systems, which can commu‐
       nicate with connected equipment using Modbus/ASCII, Modbus/RTU and Modbus/TCP pro‐
       tocols.  The  basic  communication protocol of the program is Modbus, but DCON and
       HART was also implemented due to communication with other devices.  The  range  of
       foreign protocols may be expanded later.  The program is designed for DOS, Windows
       and Unix-like operating systems.

OPTIONS
       -f --fullscreen
              Start in full screen mode.

       -h --help
              Write useable parameters.

       -r --run script
              Run a script.

       -v --version
              Write version and build information.

OPERATION
       The program can - even automatically - read, write or copy data from one device to
       another  (e.g.  transferring  settings).  When copying, the source and destination
       register areas can be different.

       The program has a traditional (CLI) or full-screen  (TUI)  command-line  interface
       and  is  also suitable for running pre-created scripts independently (as a command
       interpreter). The program provides help on the commands that can be used, and  of‐
       fers  possible values when the parameters are entered incorrectly. The issued com‐
       mands are placed in history, which can be browsed with the up/down arrow keys.

   Operating principle
       It must be defined the I/O devices, then the protocols and the connections.  There
       can be eight of each. The data traffic takes place between the preset connections.
       In all cases, the data is sent to or read from the internal buffer.  The  size  of
       the  buffer  is  suitable  for  storing 2*9999 logical and word values of the same
       size.

       One hundred and twenty-eight variables or constants can be created in the program,
       to  which we can assign a value of any type (eg.: message, boolean or integer reg‐
       ister value, etc.) Variables and constants can be used to perform logical and  ba‐
       sic mathematical operations, and can be used to pass values to commands.

       It  is  possible to create 32 single-line macros to replace frequently used longer
       commands. The program includes 3 pre-created macros, the content of which can also
       be changed.

   Projects
       In  the  program,  you  can  create projects for easier management of settings and
       data. The name of the current project is shown in the prompt. The  project  direc‐
       tory  will  be created in the program directory on DOS, and in the ModShell direc‐
       tory in the user's home directory on all other systems. If only filename is speci‐
       fied during file operations (without path), this directory will be the source/des‐
       tination directory.

   File operations
       The command line history can be exported to a text file and provides it  with  the
       appropriate  'shebang'  for  all  operating system. You can easily create a script
       from this raw file.

       Device, protocol and connection settings can be saved and loaded in their own for‐
       mat.  During saving, three typed files are created, with the following extensions:
       DDT, PDT, CDT.

       All register values can be saved and loaded in their own  format.  During  saving,
       two typed files are created, with the following extensions: BDT, WDT.

       One  or  more same type registers can be exported to file. During saving, one text
       file is created, with CSV, INI or XML extension. The program can only import  from
       INI and XML format files.

       The program has simple serial, TCP and UDP consoles whose traffic is logged in the
       project directory as console.log.

       On exit, the command line history, echo, input and send method and colors are pre‐
       served.

       The program also has basic file and directory management commands.

   Script operations
       The  script on the disc can be loaded into the already running program and started
       manually.The loaded script can be edited with a line  editor,  saved  to  disk  or
       deleted  from  the  buffer.  The graphical version has a simple editor window with
       syntax highlighting instead of the line editor.  Variables and  constants  defined
       before  running  the  script  will be deleted.  It is also possible to observe the
       values of up to four variables during runtime and to keep the final valuesof con‐
       stants  and variables created during runtime.  In interpreter mode, parameters are
       passed from the OS command line to the script and the script's exit value  is  re‐
       turned to the OS. This parameters are available as predefined constants.

   Serial console
       The  program  also provides the possibility to send and receive raw data via a se‐
       rial port, and also includes a very simple serial console. The display of sent and
       received  data  can  be  turned off or raw text and hexadecimal viewing can be se‐
       lected.

   TCP console
       The program also provides the possibility to send and receive raw data via network
       device  with TCP, and also includes a very simple TCP console. The display of sent
       and received data can be turned off or raw text and hexadecimal viewing can be se‐
       lected.

   UDP console
       The program also provides the possibility to send and receive raw data via network
       device with UDP, and also includes a very simple UDP console. The display of  sent
       and received data can be turned off or raw text and hexadecimal viewing can be se‐
       lected.

   Direct I/O access
       The program provides direct, byte-sized reading and writing of hardware I/O  ports
       on PCs and bit-sized reading and writing GPIO ports on Raspberry Pi and Industrial
       PCs. On Windows operating systems,  it  uses  the  included  external  dynamically
       linked library.

PREDEFINED VARIABLES
       $verbose
              Verbosity level (values: NOTHING|ERROR|ALL)

       Empty and any other variable value are equivalent to ALL.

PREDEFINED CONSTANTS
       $?     Exit value of the commands.

       $ARGx  OS command line arguments (interpreter mode).

       $ARGCNT
              Number of the OS command line arguments (interpreter mode).

       $B01   150 (baud).

       $B03   300 (baud).

       $B06   600 (baud).

       $B1    1200 (baud).

       $B2    2400 (baud).

       $B4    4800 (baud).

       $B8    9600 (baud).

       $B19   19200 (baud).

       $B38   38400 (baud).

       $B57   57600 (baud).

       $B115  115200 (baud).

       $EULER Value of e  (2.7182818284590452354).

       $HOME  User's home directory.

       $PI    Value of Pi (3.1415926535897932385).

       $PRJDIR
              Directory of the actual project.

       $PRJNAME
              Name of the actual project.

       $SQRT2 Value of square root of 2.

       $SQRT3 Value of square root of 3.

PREDEFINED MACROS
       mydev0 Set dev0 set /dev/ttyUSB0 9600 8 n 1.  |mypro0 Set pro0 rtu 1.  |mycon0 Set
              con0 dev0 pro0.

       These macros can also be changed.

BUILTIN COMMANDS
       Notes:
         - Register is the local buffer register, and remote register is the register  of
       the connected device.
         - The '$' sign indicates value of a variable or constant not a direct value.
         - The symbol '[x]' indicates the element number of a variable or constant array.
         - The exit value of the commands is in the '$?' constant.
         -  Enclose  the string in '"' characters, use '´ before a space, and use '^[' in
       ANSI sequences.

   Arithmetical commands
       abs $TARGET [$]VALUE
              Calculates absolute value of the [$]VALUE and the result is placed in $TAR‐
              GET.

       add $TARGET [$]VALUE1 [$]VALUE2
              Adds  the  two  values or variables ([$]VALUE1 [$]VALUE2) and the result is
              placed in $TARGET.

       avg $TARGET [$]VALUE1 [$]VALUE2 [[$]VALUE3...6]
              Calculates average of 2-5 numbers and the result is placed in $TARGET.

       conv $TARGET $FROM|bin|dec|hex|oct $TO|bin|dec|hex|oct [$]VALUE
              Converts numbers between binary, decimal,  hexadecimal  and  octal  numeral
              system.  Result is placed in $TARGET variable.  VALUE must be between 0 and
              65535

       cos $TARGET [$]VALUE
              Calculates cosine of [$]VALUE and the result is placed in $TARGET.

       cotan $TARGET [$]VALUE
              Calculates cotangent of [$]VALUE and the result is placed in $TARGET.

       dec $VARIABLE
              Decrements $VARIABLE integer.

       div $TARGET [$]VALUE1 [$]VALUE2
              Divides [$]VALUE1 by [$]VALUE2 and the result is placed in $TARGET.

       exp $TARGET [$]VALUE
              Calculates natural exponential of [$]VALUE and  the  result  is  placed  in
              $TARGET.

       idiv $TARGET [$]VALUE1 [$]VALUE2
              Divides  [$]VALUE1 by [$]VALUE2 and the result is placed in $TARGET. (inte‐
              ger division)

       imod $TARGET [$]VALUE1 [$]VALUE2
              Divides [$]VALUE1 by [$]VALUE2 and the result is placed in $TARGET.  (modu‐
              lus division)

       inc $VARIABLE
              Increments $VARIABLE integer.

       ln $TARGET [$]VALUE
              Calculates  natural logarithm of [$]VALUE and the result is placed in $TAR‐
              GET.

       mul $TARGET [$]VALUE1 [$]VALUE2
              Multiplies the two two values or variables ([$]VALUE1  [$]VALUE2)  and  the
              result is placed in $TARGET.

       mulinv $TARGET [$]VALUE
              Calculates  multiplicative  inverse of [$]VALUE and the result is placed in
              $TARGET.

       odd $TARGET [$]VALUE
              Decides whether the integer [$]VALUE is even or odd.

       pow $TARGET [$]BASE [$]EXPONENT
              Calculates [$]EXPONENT exponentiation of the  [$]BASE  and  the  result  is
              placed in $TARGET.

       pow2 $TARGET [$]EXPONENT
              Calculates  [$]EXPONENT  exponentiation  of two and the result is placed in
              $TARGET.

       prop $TARGET [$]MIN [$]MAX [$]ZERO [$]SPAN [$]VALUE
              Propotional value calculation (for example: 4-20 mA current loop  and  mea‐
              sured value).

       rnd $TARGET [$]VALUE
              Makes random integer number between 0 and [$]VALUE and the result is placed
              in $TARGET.

       round $TARGET [$]VALUE [$]DEC_PLACES
              Rounds value or variable ([$]VALUE) to [$]DEC_PLACES decimal places and the
              result is placed in $TARGET.

       sin $TARGET [$]VALUE
              Calculates sine of [$]VALUE and the result is placed in $TARGET.

       sqr $TARGET [$]VALUE
              Calculates square of [$]VALUE and the result is placed in $TARGET.

       sqrt $TARGET [$]VALUE
              Calculates square root of [$]VALUE and the result is placed in $TARGET.

       sub $TARGET [$]VALUE1 [$]VALUE2
              Substracts [$]VALUE2 from [$]VALUE1 and the result is placed in $TARGET.

       swp $VARIABLE1 $VARIABLE2
              Swaps value of the $VARIABLE1 and $VARIABLE2.

       tan $TARGET [$]VALUE
              Calculates tangent of [$]VALUE and the result is placed in $TARGET.

   Communication commands
       copyreg con? $REGTYPE|dinp|coil con? $REGTYPE|coil? [$]ADDRESS [[$]COUNT]
              Copies logical data between connections (con?). Number of connection (con?)
              must be between 0-7, register start ADDRESS and the COUNT must  be  between
              0-9998.

       copyreg con? $REGTYPE|ireg|hreg con? $REGTYPE|hreg? [$]ADDRESS [[$]COUNT]
              Copies numeral data between connections (con?). Number of connection (con?)
              must be between 0-7, register start ADDRESS and the COUNT must  be  between
              0-9998.

       dcon con? $TXARRAY $RXARRAY
              Reads  or writes data from/to remote device with DCON protocol. The command
              takes the input data from the $TXARRAY array, the output data is placed  in
              the $RXARRAY. Both arrays can only be variable arrays. If necessary, arrays
              are resized by the command.

              $$TXARRAY:
                [0]  delimiter [$, #, %, @]
                [1]  command
                [2]  input data
                [3]  checksum enable/disable [1/0]

              $$RXARRAY:
                [0]  delimiter [!, ?, >]
                [1]  command (non used)
                [2]  output data
                [3]  checksum, output data is correct or not [1/0]

       mbgw con? con?
              Start internal Modbus slave/server for remote access own registers.

       mbconv n2a|a2n $ARRAY
              Converts Modbus register type and address to register number.  The  command
              takes  the  input  data from the $ARRAY array, the output data is placed in
              the same variable array.

              Variables in the array:
                [0]  register number;
                [1]  register type;
                [2]  address.

              Register number:     1- 9999;
                               10001-19999;
                               30001-39999;
                               40001-49999.
              Register type:   coil; dinp; ireg; hreg.
              Address:             0- 9998.

       mbmon [con?]
              Opens a simple serial monitor for decode  Modbus/ASCII  or  RTU  telegrams.
              The  decoded  traffic  is  saved  to the project directory named mbmon.log.
              Number of connection (con?) must be between 0-7.

       mbsrv con?
              Start internal Modbus gateway for access other  remote  device's  registers
              with different communication and/or protocol.

       readreg con? $REGTYPE|dinp|coil|ireg|hreg [$]ADDRESS [ICOUNT]
              Reads  one  or  more remote registers. Number of connection (con?)  must be
              between 0-7, register start ADDRESS and the COUNT must be between 0-9998.

       sercons [dev?]
              Opens a simple serial console. Data traffic is logged to the project direc‐
              tory named console.log. Number of device (dev?) must be between 0-7.

       serread [dev?] [$TARGET]
              Reads  string from serial device to variable $TARGET or write screen.  Num‐
              ber of device (dev?) must be between 0-7.

       serwrite [dev?] $MESSAGE
              Writes string to serial device from $MESSAGE.  Number of device (dev?) must
              be between 0-7.

       serwrite [dev?] "MESSAGE"
              Writes  "MESSAGE" to serial device. Number of device (dev?) must be between
              0-7.

       tcpcons [dev?]
              Opens a simple TCP console. Data traffic is logged to the project directory
              named console.log. Number of device (dev?) must be between 0-7.

       tcpread [dev?] [$TARGET]
              Reads  string  from  network  device  with TCP to variable $TARGET or write
              screen.  Number of device (dev?) must be between 0-7.

       tcpwrite [dev?] $MESSAGE
              Writes string to network device with TCP from $MESSAGE.  Number  of  device
              (dev?) must be between 0-7.

       tcpwrite [dev?] "MESSAGE"
              Writes  "MESSAGE"  to network device with TCP. Number of device (dev?) must
              be between 0-7.

       udpcons [dev?]
              Opens a simple UDP console. Data traffic is logged to the project directory
              named console.log. Number of device (dev?) must be between 0-7.

       udpread [dev?] [$TARGET]
              Reads  string  from  network  device  with UDP to variable $TARGET or write
              screen.  Number of device (dev?) must be between 0-7.

       udpwrite [dev?] $MESSAGE
              Writes string to network device with UDP from $MESSAGE.  Number  of  device
              (dev?) must be between 0-7.

       udpwrite [dev?] "MESSAGE"
              Writes  "MESSAGE"  to network device with UDP. Number of device (dev?) must
              be between 0-7.

       writereg con? $REGTYPE|coil|hreg [$]ADDRESS [[$]COUNT]
              Writes data to one or more remote registers. Number  of  connection  (con?)
              must  be  between 0-7, register start ADDRESS and the count must be between
              0-9998.

   Configuration commands
       get dev?|pro?|con?|project|timeout
              Gets configuration of  a  device  (dev?),  protocol  (pro?)  or  connection
              (con?),  or project name (project) or connection timeout (timeout) in s.  ?
              number must be 0-7, timeout must be 1-60.

       reset dev?|pro?|con?|project
              Resets configuration of a device  (dev?),  protocol  (pro?)  or  connection
              (con?), or reset project name (project). ? number must be 0-7.

       set dev? net [$]DEVICE [$]IP_ADDRESS [$]PORT
              Sets  device (dev?) to ethernet (net) device. Device number must be between
              0-7 and port number must be between 0-65535. The DEVICE name on DOS is  al‐
              ways  PACKET, on other systems is the name of the adapter (e.g. eth0, nfe0,
              etc.). Address of remote device (IP_ADDRESS) must  be  in  a.b.c.d  format,
              with values between 1-255.

       set dev? ser [$]DEVICE [$]BAUDRATE [$]DATABIT [$]PARITY [$]STOPBIT
              Sets  device  (dev?)  to serial (ser) device. Device number must be between
              0-7. The DEVICE name is the name of the adapter (e.g. com1, ttyS0, ttyUSB0,
              ttyAMA0  etc.).  BAUDRATE  must  be: 150, 300, 600, 1200, 2400, 4800, 9600,
              19200, 38400, 57600 or 115200. DATABIT must be 7 or 8, PARITY must be E/N/O
              (even/none/odd). STOPBIT must be 1 or 2.

       set pro? ascii|rtu|tcp [$]ID
              Sets protocol (pro?) and unit ID. Unit ID (ID) must be between 1-247.

       set pro? dcon [$]ADDRESS
              Sets  protocol  (pro?)  to  DCON (dcon). Address of remote device (ADDRESS)
              must be between 1-255.

       set pro? hart [$]ADDRESS
              Sets protocol (pro?) to HART (dcon). Address  of  remote  device  (ADDRESS)
              must be between 0-15.

       set con? dev? pro?
              Assigns  a  device  (dev?)  and a protocol (pro?) to a connection (con?). ?
              number must be 0-7.

       set color [$]FOREGROUND [$]BACKGROUND [$]RXD_TEXT [$]TXD_TEXT [$]VARMON
              Sets all default colors in CLI and TUI mode.

              Colors:
              0: black  4: red         8: darkgray    12: lightred
              1: blue   5: magenta:    9: lightblue   13: lightmagenta
              2: green  6: brown      10: lightgreen  14: yellow
              3: cyan   7: lightgray  11: lightcyan   15: white

       set project [$]PROJECT_NAME
              Sets the project name. The name cannot contain spaces  or  special  charac‐
              ters.  The project directory will also be created with this name.

       set timeout [$]TIMEOUT
              Sets the connection timeout in ms.

   File operation commands
       The  specified  parameter  does  not contain a path, the file will be saved in the
       project directory in the user's home directory (on DOS, in  project  directory  in
       the program directory).

       applog [$]LOGFILE $TEXT [$]LEVEL [[$]VALUE1] ... [[$]VALUE4]
              Appends  a record to $LOGFILE. The record contains timestamp, message level
              and the text. The level can be 0-4: NOTE, MESSAGE, WARNING,  ERROR,  DEBUG.
              The  text  contains  the  level  can contain $$1-$4 variables, these can be
              specified on the command line.

       applog [$]LOGFILE "TEXT $$1 TEXT" [$]LEVEL [[$]VALUE1]
              Appends a record to $LOGFILE. The record contains timestamp, message  level
              and  the  text. The level can be 0-4: NOTE, MESSAGE, WARNING, ERROR, DEBUG.
              The text contains the level can contain  $$1-$4  variables,  these  can  be
              specified on the command line.

       exphis [$]PATH_AND_FILENAME
              Exports command line history to a text file.

       expreg [$]PATH_AND_FILENAME $REGTYPE|dinp|coil|ireg|hreg [$]ADDRESS [[$]COUNT]
              Exports  content of the one or more registers to a text file in CSV, INI or
              XML format. The file format is specified by the destination file extension.
              If the file exists, it will overwrite or append the new data.

       impreg [$]PATH_AND_FILENAME
              Imports content of the one or more registers from a text file in INI or XML
              format. The file format is specified by the destination file extension.

       loadcfg [$]PATH_AND_FILENAME
              Loads settings of device, protocol and connection from own format files.

       loadreg [$]PATH_AND_FILENAME
              Loads all registers from own format files.

       savecfg [$]PATH_AND_FILENAME
              Saves settings of device, protocol and connection to four typed files.

       savereg [$]PATH_AND_FILENAME
              Saves all registers to four typed files.

   General commands
       arrclear ARRAY
              Clears content of an array.

       arrfill ARRAY [$]DATA
              Fills an array with [$]DATA.

       ascii [$NUMSYS|dec|hex]
              Shows ASCII table (0-127 characters) with decimal or hexadecimal numbers.

       beep   Make a beep.

       carr   Prints constant arrays with their size.

       carr ARRAY
              Defines new zero size ARRAY constant array.

       carr ARRAY SIZE
              Defines new SIZE size ARRAY constant array.

       cls    Clears screen.

       const CONSTANT [[$]VALUE]
              Defines new constant (CONSTANT) and assign value (VALUE).  Use a  backslash
              before a space.

       cron rec_num minute hour
              Adds new record to crontable. rec_num may be 1-4.

       cron [-r rec_num]
              Shows  all  or  removes specified record from the crontable. rec_num may be
              1-4.

       datatype [$]VALUE
              Specifies the type of the value ([$]VALUE). The result will be in the  exit
              code: 0: string, 1: floating-point value, 1: integer value.

       date [$TARGET]
              Shows or write into $TARGET variable system date and time.

       echometh [off|an|hex|swap]
              Queries or changes local echo method for connection.  AN means alphanumeri‐
              cal, hex means the hexadecimal representation of the bytes.

       exit [[$]EXIT_CODE]
              Exits from program or script.

       for $VARIABLE [$]VALUE1 to [$]VALUE2 do COMMAND
              Loop iteration (only in script). Increments  $VARIABLE  from  [$]VALUE1  to
              [$]VALUE2 and does COMMAND.

       getarrsize ARRAY $TARGET
              Gets size of an array and placed in $TARGET.

       goto [$]LABEL
              Jumps to specified label (only in script).

       help [[$]COMMAND]
              Shows description or usage of the builtin commands.

       if [$]VALUE1 RELATIONAL_SIGN [$]VALUE2 then COMMAND
              Selection  statement  (only in script). RELATIONAL_SIGN: < <= = >= > <> and
              == for strings.

       inputmeth [an|hex|swap]
              Queries or changes local input method for connection.  AN means alphanumer‐
              ical, hex means the hexadecimal representation of the bytes.

       input $TARGET [[$]PROMPT]
              Shows prompt and reads data from console and and placed in $TARGET.

       label LABEL
              Define label (only in script).

       let $VARIABLE [$]VALUE
              Sets value of $VARIABLE variable or constant to value [$]VALUE.

       let $VARIABLE nul
              Clear $VARIABLE variable content.

       macro NAME command with parameters
              Make one-line macro.

       pause [[$]TIME]
              Waits for a keystroke or specified time.

       pipe ARRAY push|pop [$]DATA
              Uses a variable array as a FIFO storage.

       print dinp|coil|ireg|hreg [$]ADDRESS [[$]COUNT] [-n]
              Prints content of the one or more registers. Register start ADDRESS and the
              COUNT must be between 0-9998. The -n parameter does not raise  a  line  and
              the cursor does not return to the beginning of the line.

       print $VARIABLE [-n]
              Prints  value  of the $VARIABLE. The -n parameter does not raise a line and
              the cursor does not return to the beginning of the line.

       print "message" [-n]
              Prints a single line message. The -n parameter does not raise  a  line  and
              the cursor does not return to the beginning of the line.

       printcolor [$]FOREGROUND|255 [$]BACKGROUND|255
              Sets  temporary  foreground  and background colors for print command in CLI
              and TUI mode.  Value 255 sets color to default.

              Colors:
              0: black  4: red         8: darkgray    12: lightred
              1: blue   5: magenta:    9: lightblue   13: lightmagenta
              2: green  6: brown      10: lightgreen  14: yellow
              3: cyan   7: lightgray  11: lightcyan   15: white

       runmeth
              Gets running method.

              Exit code:
              0: simple command line
              1: show useable arguments
              2: show version and build information
              3: full sceen command line
              4: interpreter mode
              5: GUI mode

       sendmeth [chr|str|swap]
              Queries or changes send method for connection.  Chr means char-to-char, str
              means string sending.

       setarrsize ARRAY [[$]SIZE]
              Sets size of an array.

       stack ARRAY push|pop [$]DATA
              Uses a variable array as a LIFO storage.

       var    Prints all defined variables with their values.

       var VARIABLE [[$]VALUE]
              Defines  new  variable (ARIABLE) and assign value (VALUE).  Use a backslash
              before a space.

       varr   Prints variable arrays with their size.

       varr ARRAY
              Defines new zero size ARRAY variable array.

       varr ARRAY SIZE
              Defines new SIZE size ARRAY variable array.

       varmon off|on
              Enable/disable variable monitor.

       varmon $VARIABLE off|on
              Enable/disable monitoring of the specified variable.

       ver    Shows version and build information of this program.

   Logical commands
       and $TARGET [$]VALUE1 [$]VALUE2
              Performs the AND operation between the two values or  variables  ([$]VALUE1
              [$]VALUE2) and the result is placed in $TARGET.

       bit $TARGET [$]VALUE1 [$]VALUE2
              Returns with the specified bit [$]VALUE2 of the [$]VALUE1.

       not $TARGET [$]VALUE
              Performs  the  NOT operation on value or variable ([$]VALUE) and the result
              is placed in $TARGET.

       or $TARGET [$]VALUE1 [$]VALUE2
              Performs the OR operation between the two values  or  variables  ([$]VALUE1
              [$]VALUE2) and the result is placed in $TARGET.

       roll $TARGET [$]VALUE1 [$]VALUE2
              Rolls  bits  of the [$]VALUE1 to the left by position [$]VALUE2 and the re‐
              sult is placed in $TARGET.

       rolr $TARGET [$]VALUE1 [$]VALUE2
              Rolls bits of the [$]VALUE1 to the right by position [$]VALUE2 and the  re‐
              sult is placed in $TARGET.

       shl $TARGET [$]VALUE1 [$]VALUE2
              Shifts  bits of the [$]VALUE1 to the left by position [$]VALUE2 and the re‐
              sult is placed in $TARGET.

       shr $TARGET [$]VALUE1 [$]VALUE2
              Shifts bits of the [$]VALUE1 to the right by position [$]VALUE2 and the re‐
              sult is placed in $TARGET.

       xor $TARGET [$]VALUE1 [$]VALUE2
              Performs  the  XOR operation between the two values or variables ([$]VALUE1
              [$]VALUE2) and the result is placed in $TARGET.

   Register handler commands
       dump [$REGTYPE|dinp|coil|ireg|hreg [$]ADDRESS]
              Dumps one page register content from ADDRESS in  binary/hexadecimal  format
              to a table.

       let dinp|coil|ireg|hreg [$]ADDRESS [$]VALUE
              Sets  value  of  a register. Register start address must be between 0-9998.
              If register type is discrete input (dinp) and coil (coil),  VALUE  must  be
              0/1,  l/h or false/true. If it is input register (ireg) or holding register
              (hreg), VALUE must be 0-65535.

       let $VARIABLE dinp|coil|ireg|hreg [$]ADDRESS
              Sets value of a variable $VARIABLE from register  content.  Register  start
              address  and  must  be  between  0-9998, If register type is discrete input
              (dinp) and coil (coil), value will be 0/1, if it is input  register  (ireg)
              or holding register (hreg), value of the variable will be 0-65535.

   Script operation commands
       edit [LINE_NUMBER]
              Edits loaded script with line editor.

       erasescr
              Erases script from buffer.

       list   Lists loaded script.

       loadscr [$]PATH_AND_FILENAME
              Loads ModShell scriptfile from disc.

       run [-h] [-s]
              Runs loaded script. When the [-h] parameter is specified, the valuesof the
              variables and constants created by the script are preserved until the  next
              run.  [-s] parameter means step-by-step program execution.
               .TP savescr [$]PATH_AND_FILENAME Saves loaded script to disc.

   String handler commands
       chr $TARGET [$]VALUE';
              Converts  byte  value  ([$]VALUE) to char value and the result is placed in
              $TARGET.

       concat $TARGET [$]VALUE1 [$]VALUE2
              Concatenates two string and the result is placed in $TARGET.

       length $TARGET [$]VALUE
              Puts length of the string ([$]VALUE) to $TARGET.

       lowcase $TARGET [$]VALUE
              Converts string ([$]VALUE) to lowercase and the result is placed  in  $TAR‐
              GET.

       mklrc $TARGET [$]STRING
              Make LRC of the [$]STRING

       mkcrc $TARGET [$]STRING
              Make CRC of the [$]STRING

       ord $TARGET [$]VALUE
              Converts  char  value  ([$]VALUE) to byte value and the result is placed in
              $TARGET.

       strdel $TARGET [$]PLACE [$]COUNT
              Delete specified element(s) ([$]PLACE [$]COUNT) of the $TARGET variable.

       strfind $TARGET [$]VALUE
              Delete specified element ([$]VALUE) in the $TARGET variable.

       strins $TARGET [$]PLACE [$]VALUE
              Insert specified element ([$]VALUE) into the $TARGET variable.

       stritem $TARGET [$]VALUE1 [$]VALUE2
              Puts specified ([$]VALUE2) element of the string ([$]VALUE1) to $TARGET.

       strrepl $TARGET [$]OLD [$]NEW
              Replace specified element ([$]OLD) to [$]NEW in the $TARGET variable.

       upcase $TARGET [$]VALUE
              Converts string ([$]VALUE) to uppercase and the result is placed  in  $TAR‐
              GET.

   File and directory management system commands
       dir [[$]PATH_AND_DIRECTORYNAME]
              Lists content of actual or [$]PATH_AND_DIRECTORYNAME directory.

       cd     Gets name of the actual directory.

       cd [[$]PATH_AND_DIRECTORYNAME]
              Changes actual directory to [$]PATH_AND_DIRECTORYNAME.

       chkdevlock [$]DEVICE
              Check [$]DEVICE device lock file.

       copy [$]PATH_AND_FILENAME [$]NEW_PATH_AND_FILENAME
              Copies [$]PATH_AND_FILENAME file to [$]NEW_PATH_AND_FILENAME.

       del [$]PATH_AND_FILENAME
              Removes [$]PATH_AND_FILENAME file.

       exist [$]PATH_AND_FILENAME
              Existence of [$]PATH_AND_FILENAME file or directory.

       gpioread [$]BIT [$]PORT
              Read a bit from a GPIO port.

       gpiowrite [$]PORT [$]BIT
              Write a bit to a GPIO port.

       ioread [$]BYTE [$]PORT
              Read a byte from an I/O port.

       iowrite [$]PORT [$]BYTE
              Write a byte to an I/O port.

       md [$]PATH_AND_DIRECTORYNAME
              Makes a directory.

       rd [$]PATH_AND_DIRECTORYNAME
              Removes [$]PATH_AND_DIRECTORYNAME directory if empty.

       ren [$]PATH_AND_FILENAME [$]NEW_PATH_AND_FILENAME
              Renames [$]PATH_AND_FILENAME file to [$]NEW_PATH_AND_FILENAME.

       rmdevlock [$]DEVICE
              Remove [$]DEVICE device lock file.

       type [$]PATH_AND_FILENAME
              Lists content [$]PATH_AND_FILENAME file.

EXAMPLES
   Arithmetical commands
       add $result 12 13
              Adds 12 and 13, and the result is placed in $result.

       conv $result bin hex 1011000010110100
              Convert 45236 in binary to hexadecimal, result placed in $result (B0B4).

       conv $result hex dec $i
              Convert  value  of  the $i in hexadecimal to decimal. Result placed in $re‐
              sult.

       round $result 12.01023 2
              Round 12.01023 to decimal places, and the result (12.01) is placed in  $re‐
              sult.

       subs $result 12 13
              Substract 13 from 12, and the result is placed in $result.

   Communication commands
       copyreg con0 ireg con2 hreg 210 10
              Copy  input  register content of the connection #0 to holding register con‐
              tent of the connection #2 from data address 210 to 220.

       copyreg con0 ireg con2 hreg $a $b
              Copy input register content of the connection #0 to holding  register  con‐
              tent of the connection #2 from data address value of the $a to $a+$b.

       readreg con0 hreg 100 15
              Read remote holding registers of the connection #0 from data address 100 to
              115.

       readreg con0 hreg $a 15
              Read remote holding registers of the connection #0 from data address  value
              of the $a to $a+15.

       sercons
              Open serial console with requesting device number.

       sercons dev0
              Open serial console with dev0 device.

       serread dev0
              Read string from dev0 device and write to screen.

       serread dev0 $target
              Read string from dev0 device and write to $target variable.

       serwrite dev0 "The quick brown fox jumps over the lazy dog."
              Write string to dev0 device.

       serwrite dev0 "$message"
              Write string from $message variable to dev0 device.

       writereg con2 coil 10
              Write data from to coil data address 10 of the connection #2.

       writereg con2 coil $c
              Write data from to coil data address value of the $c of the connection #2.

   Configuration commands
       get dev2
              Get configuration of a device #2.

       reset project
              Reset project name (project name will be 'default').

       set dev0 net /dev/enp0s7 192.168.10.11 502
              Set  device  #0  to '/dev/enp0s7' ethernet device with 192.168.10.11 IP-ad‐
              dress and 502 port.

       set dev0 net /dev/enp0s7 $A $P
              Set device #0 to '/dev/enp0s7' ethernet device with value of the $A  IP-ad‐
              dress and $P port.

       set dev1 ser ttyS0 9600 8 N 1
              Set  device  #1  to  /dev/ttyS0  serial device, with 9600 baud, 8 databits,
              without parity check and 1 stopbit.

       set dev1 ser COM1 9600 8 N 1
              Set device #1 to COM1 serial device, with 9600 baud,  8  databits,  without
              parity check and 1 stopbit.

       set dev1 ser $p $s $d $p $t
              Set  device  #1  to  $p serial device, with $s baud, $d databits, $p parity
              check and $t stopbit.

       set pro0 ascii 100
              Set protocol #0 to Modbus/ASCII with 100 unit ID (slave).

       set con0 dev0 pro2
              Assigns a device #0 and protocol #2 to connection #0.

       set project temp_meter
              Set the project name to 'temp_meter'.

       set timeout 1000
              Set the connection timeout to 1 s.

   File operation commands
       applog $LOGFILE "Measured values is $$1 V and $$2 A." 1 $vl2 $il2
              Adds 2024.2.1. 17:20:36 MESSAGE Measured values is 243 V and 66 A. line  to
              logfile.

       exphis script
              Export command line history to project directory.

       expreg discrete_inputs.csv dinp 100 15
              Export  values  of  discrete input register from data address 100 to 115 to
              CSV file.

       impreg discrete_inputs.xml
              Import values from a XML file. The target and range are determined  by  the
              contents of the file.

       loadcfg test1
              Load settings of device, protocol and connection from project directory.

       loadreg /home/username/Desktop/test1
              Load all registers from other directory.

       savecfg test1
              Save settings of device, protocol and connection to project directory.

       savereg /home/username/Desktop/test1
              Save all registers to other directory.

   General commands
       cron 2 15 *
              Run the loaded script at the 15th minute of every hour.
               .TP cron -r 2 Removes 2nd record from the crontable.

       echo   Query local echo status.

       echometh an
              Set alphanumerical local echo for connections.

       echo hex
              Enable local echo with hexadecimal representation of the bytes.

       help   Show short description of the useable commands.

       help set
              Show usage of help command.

       let $a 10
              Set $a variable to 10.

       let $a $b
              Set $a variable to value of $b.

       pause  Wait for a key press.

       pause 5
              Wait for 5 sec.

       pause $time
              Wait for value of the $time sec.

       print $a -n
              Print value of the $a variable without new line.

       print "Hello world!"
              Print 'Hello world!' message.

       var A 12
              Define $a variable and assign 12 value to it.

       var B $a
              Define $b variable and assign value of the $a.

   Logical commands
       and $result 1234 1345
              Performs AND operation with 1234 and 1345, and the result is placed in $re‐
              sult.

       or $result 1234 $b
              Performs OR operation with 1234 and $b, and the result is  placed  in  $re‐
              sult.

       not $result $a
              Performs negation on 1234 and the result is placed in $result.

       shr $result $source $shift
              Shifts bits of the $source to the left by position $shift and the result is
              placed in $result.

   Register handler commands
       dump   Start dump with requesting register type and start data address.

       dump hreg 1121
              Start discrete input register dump from data address 1121.

       let dinp 10 1
              Set value of the discrete input register data address 10 to 1.

       let dinp 10 true
              Set value of the discrete input register data address 10 to 1.

       let dinp 10 H
              Set value of the discrete input register data address 10 to 1.

       let ireg 10 65535
              Set value of the input register data address 10 to 65535.

       let ireg $a $b
              Set value of the input register (data address value of the $a) to value  of
              the $b.

       let $a ireg 100
              Set $a to input register data address 100.

       print ireg 10 10
              Print value of the input register data address 10 to 20.

       print ireg $a $b
              Print value of the input register data address value of $a to value of $b.

   Script operation commands
       loadscr /home/username/Desktop/dt510
              Load dt510 scriptfile other directory.

       run -s -h
              Run loaded script step-by-step and reserve variables until next run.

   String handler commands
       chr $ch $b
              Convert byte type value in $b to character and the result is placed in $ch.

       length $length "abcdef"
              Put length of the specified string to $length variable.

       stritem $char $name 5
              Put 5th element of the $name string to $char variable.

       upcase $target $title
              Convert string in title to uppercase and the result is placed in $target.

   System commands
       type $LOGFILE
              List file in $LOGFILE to console.

       ren $LOGFILE backup
              Rename file in $LOGFILE to "backup.bak".

HOTKEYS
       Commands  with  function keys (F?) are executed immediately, modifier keys (ALT-?)
       only make typing easier.

       UP     scroll up command line history

       DOWN   scroll down command line history

       ESC    clear command line

       ENTER  run command

       F1     help command

       F2     savecfg command

       F3     loadcfg command

       F4     savereg command

       F5     loadreg command

       F6     dump command

       F7     sercons command

       F8     cls command

       F9     echometh swap command

       F10    exit command

       F11    list command

       F12    run loaded script

       CTRL-F9
              sendmeth swap

       SHIFT-F3
              list loaded script

       SHIFT-F4
              edit loaded script

       SHIFT-F7
              sercons command

       SHIFT-F8
              erase script from buffer

       SHIFT-F9
              inputmeth swap

       ALT-C  conv command

       ALT-E  expreg command

       ALT-G  get command

       ALT-I  impreg command

       ALT-L  let command

       ALT-M  monitoring the value of variables

       ALT-P  print command

       ALT-R  readreg command

       ALT-T  reset command

       ALT-S  set command

       ALT-W  writereg command

ENVIRONMENTAL VARIABLES
       LANG   This is the system language on DOS and Unix-like operating systems.

       PKTDRVINT
              To access the network on DOS, the packet driver of the network card is  re‐
              quired.  It  uses an x86 interrupt number (INT) between 0x60 and 0x80. This
              variable tells the program this value. If there is no or it is empty,  then
              the default 0x60 will be used.

FILES
       modshell.ini
              General configuration file in user's directory on Windows or Unix-like sys‐
              tem or in the settings folder of the program on DOS.

       console.log
              Traffic log of the serial console.

       mbmon.log
              Decoded Modbus telegrams from serial modbus monitor.

       scriptfiles[.bat]
              The script file is used for batch execution of ModShell commands. The  com‐
              mands  must be entered in the same form as if we were working in the built-
              in command line. If the first valuable character (not a space or tab) of  a
              line is a hash, then that line is not interpreted. You can find examples in
              the documents library.

              A simple example on Unix-like OS:

              #!/usr/local/bin/modshell -r

              # Example script * use of variables
              print "Example script - How to use variables?"
              print "--------------------------------------------"
              var a 24
              var b
              var c
              let $b 2
               (...)
              print "The sum of $A and $B:"
              print "--------------------------------------------"

              A simple example on DOS and Windows OS:

              @modshell.exe -r %0
              @goto :eof

              # Example script * use of variables
              print "Example script - How to use variables?"
              print "--------------------------------------------"
              var a 24
              var b
              var c
              let $b 2
               (...)
              print "The sum of $A and $B:"
              print "--------------------------------------------"

              :eof

       *.DDT  Saved device setting in typed file with seven TDevice type values.
              type TDevice = record
                     valid: boolean;     // settings validity: false|true
                     devtype: byte;      // type of device: 0..1 -> see DEV_TYPE
                     device: string[15]; // device: /dev/ttySx, COMx, /dev/eth0 etc.
                     port: word;         // ethernet port: 0-65535
                     speed: byte;        // serial speed: 0..7 -> see DEV_SPEED
                     databit: byte;      // serial databits: 7|8
                     parity: byte;       // serial parity: 0..2 -> see DEV_PARITY
                     stopbit: byte;      // serial stopbit: 1|2
                   end;

       *.PDT  Saved protocol setting in typed file with seven TProtocol type values.
              type TProtocol = record
                     valid: boolean;        // settings validity: false|true
                     prottype: byte;        // type of protocol: 0..2 -> see PROT_TYPE
                     ipaddress: string[15]; // IP address in a.b.c.d format
                     ID: integer;          // Modbus Unit ID: 1..247
                   end;

       *.CDT  Saved connection setting in typed file with seven TConnection type values.
              type TConnection = record
                     valid: boolean;        // settings validity: false|true
                     dev: byte;             // assigned device: 0..7
                     prot: byte;            // assigned protocol: 0..7
                   end;

       *.BDT  Saved boolean type register values in typed file with 2x9999  boolean  val‐
              ues.

       *.WDT  Saved word type register values in typed file with 2x9999 word values.

       *.CSV  Exported  boolean  or word type register values in CSV text file. Cannot be
              imported.  Internal structure:
                dinp,0,0
                    ...
                dinp,9998,1
                coil,0,0
                    ...
                coil,9998,1
                ireg,0,102
                    ...
                ireg,9998,33332
                hreg,0,5342
                    ...
                hreg,9998,12

       *.INI  Exported register values in INI text file in this structure:
                [dinp]
                addr_0=0
                  ...
                addr_9998=1

                [coil]
                addr_0=0
                  ...
                addr_9998=1

                [ireg]
                addr_0=102
                  ...
                addr_9998=33332

                [hreg]
                addr_0=5342
                  ...
                addr_9998=12

       *.XML  Exported register values in XML text file in this structure:
                <?xml version="1.0" encoding="utf-8"?>
                <xml>
                  <dinp>
                    <reg addr="0">0</reg>
                            ...
                    <reg addr="9998">1</reg>
                  </dinp>
                  <coil>
                    <reg addr="0">0</reg>
                            ...
                    <reg addr="9998">1</reg>
                  </coil>
                  <ireg>
                    <reg addr="0">102</reg>
                            ...
                    <reg addr="9998">33332</reg>
                  </ireg>
                  <hreg>
                    <reg addr="0">5342</reg>
                            ...
                    <reg addr="9998">12</reg>
                  </hreg>
                </xml>

EXIT STATUS
       0      Normal exit.

       1      Terminal size is smaller than 80x25 characters.

       2      The specified script file does not exist.

       3      The specified script file cannot be loaded.

       4      Script buffer is full.

HOMEPAGE
       ⟨http://www.pozsarzs.hu⟩

       ⟨https://pozsarzs.github.io/modshell⟩

       ⟨https://github.com/pozsarzs/modshell⟩

SEE ALSO
       mbconv(1) numconv(1) serialechoserver(1) serialmbmonitor(1) tcpechoserver(1) udpe‐
       choserver(1) xmodshell(1) and files in document or /usr/share/doc/modshell/ folder
       (or equivalent on your system).
AUTHOR
       Pozsar Zsolt ⟨pozsarzs@gmail.com⟩

                                    2024 Szeptember 30                        ModShell(1)
