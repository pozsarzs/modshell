ModShell(1)                      General Commands Manual                     ModShell(1)

NAME
       modshell - Command-driven scriptable Modbus utility

SYNOPSIS
       modshell [options]

COPYRIGHT
       ModShell is Copyright (C) 2023 by Pozsar Zsolt.

DESCRIPTION
       This is a utility that can be used on several operating systems, which can commu‐
       nicate with connected equipment using  Modbus/ASCII,  Modbus/RTU  and  Modbus/TCP
       protocols.  The program is designed for DOS, Windows and Unix-like operating sys‐
       tems.

OPTIONS
       -f --fullscreen
              Start in full screen mode.

       -h --help
              Write useable parameters.

       -r --run script
              Run a script.

       -v --version
              Write version and build information.

OPERATION
       The program can - even automatically - read, write or copy data from  one  device
       to another (e.g. transferring settings). When copying, the source and destination
       register areas can be different.

       The program has a traditional (CLI) or full-screen (TUI)  command-line  interface
       and  is also suitable for running pre-created scripts independently (as a command
       interpreter). The program provides help on the commands that can be used, and of‐
       fers possible values when the parameters are entered incorrectly. The issued com‐
       mands are placed in history, which can be browsed with the up/down arrow keys.

   Operating principle
       It must be defined the I/O devices,  then  the  protocols  and  the  connections.
       There  can be eight of each. The data traffic takes place between the preset con‐
       nections. In all cases, the data is sent to or read  from  the  internal  buffer.
       The  size of the buffer is suitable for storing 2*9999 logical and word values of
       the same size. Sixty-four variables can be created in the program,  to  which  we
       can  assign a value of any type (eg.: message, boolean or integer register value,
       etc.) Variables can be used to perform logical and basic mathematical operations,
       and can be used to pass values to commands.

   Projects
       In  the  program,  you  can create projects for easier management of settings and
       data. The name of the current project is shown in the prompt. The project  direc‐
       tory  will be created in the program directory on DOS, and in the ModShell direc‐
       tory in the user's home directory on all other systems. If only filename is spec‐
       ified  during  file  operations  (without  path),  this  directory  will  be  the
       source/destination directory.

   File operations
       The command line history can be exported to a text file and provides it with  the
       appropriate  'shebang'  for  all operating system. You can easily create a script
       from this raw file.

       Device, protocol and connection settings can be saved and  loaded  in  their  own
       format.  During  saving, three typed files are created, with the following exten‐
       sions: DDT, PDT, CDT.

       All register values can be saved and loaded in their own format.  During  saving,
       two typed files are created, with the following extensions: BDT, WDT.

       One  or more same type registers can be exported to file. During saving, one text
       file is created, with CSV, INI or XML extension.

       The program has a simple serial console whose traffic is logged  in  the  project
       directory as console.log.

       On  exit,  the  command line history and full screen mode command line colors are
       preserved.

BUILTIN COMMANDS
       Notes:
         - register: local buffer register;
         - remote register: register of the connected device;
         - The '$' sign indicates a variable not a direct value.

   General commands
       cls    Clear screen.

       color [$]FOREGROUND [$]BACKGROUND
              Set foreground and background color in full screen mode.

              Colors:
              0: black  4: red         8: darkgray    12: lightred
              1: blue   5: magenta:    9: lightblue   13: lightmagenta
              2: green  6: brown      10: lightgreen  14: yellow
              3: cyan   7: lightgray  11: lightcyan   15: white

       date   Show system date and time.

       echo [off|on|hex]
              Query local echo status or enable/disable it for serial connections.   Hex
              means the hexadecimal representation of the bytes.

       exit   Exit from program.

       help   Show description or usage of the builtin commands.

       pause [[$]TIME]
              Wait for a keystroke or specified time.

       print dinp|coil|ireg|hreg [$]ADDRESS [[$]COUNT]
              Print content of the one or more registers. Register start ADDRESS and the
              COUNT must be between 1-9999.

       print $VARIABLE
              Print value of the $VARIABLE.

       print "message"
              Print a single line message.

       var    Print all defined variables with their values.

       var VARIABLE [[$]VALUE]
              Define new variable (ARIABLE) and assign value (VALUE).  Use  a  backslash
              before a space.

       ver    Show version and build information of this program.

   Logical commands
       and $TARGET [$]VALUE1 [$]VALUE2
              Performs  the AND operation between the two values or variables ([$]VALUE1
              [$]VALUE2) and the result is placed in $TARGET.

       or $TARGET [$]VALUE1 [$]VALUE2
              Performs the OR operation between the two values or  variables  ([$]VALUE1
              [$]VALUE2) and the result is placed in $TARGET.

       not $TARGET [$]VALUE
              Performs  the NOT operation on value or variable ([$]VALUE) and the result
              is placed in $TARGET.

       xor $TARGET [$]VALUE1 [$]VALUE2
              Performs the XOR operation between the two values or variables  ([$]VALUE1
              [$]VALUE2) and the result is placed in $TARGET.

       shl $TARGET [$]VALUE1 [$]VALUE2
              Shifts bits of the [$]VALUE1 to the left by position [$]VALUE2 and the re‐
              sult is placed in $TARGET.

       shr $TARGET [$]VALUE1 [$]VALUE2
              Shifts bits of the [$]VALUE1 to the right by position  [$]VALUE2  and  the
              result is placed in $TARGET.

   Mathematical commands
       add  $TARGET  [$]VALUE1  [$]VALUE2  Adds  the  two values or variables ([$]VALUE1
       [$]VALUE2) and the result is placed in $TARGET.

       conv bin|dec|hex|oct bin|dec|hex|oct [$]VALUE
              convert numbers between binary, decimal,  hexadecimal  and  octal  numeral
              system.  VALUE must be between 0 and 65535

       div $TARGET [$]VALUE1 [$]VALUE2
              Divide  [$]VALUE1 by [$]VALUE2 and the result is placed in $TARGET. (inte‐
              ger division)

       mul $TARGET [$]VALUE1 [$]VALUE2
              Multiply the two two values or variables ([$]VALUE1 [$]VALUE2) and the re‐
              sult is placed in $TARGET.

       sub $TARGET [$]VALUE1 [$]VALUE2
              Substract [$]VALUE2 from [$]VALUE1 and the result is placed in $TARGET.

   Configuration commands
       get dev?|pro?|con?|prj
              Get  configuration  of  a  device  (dev?),  protocol  (pro?) or connection
              (con?), or get project name (prj). ? number must be 0-7.

       reset dev?|pro?|con?|prj
              Reset configuration of a device  (dev?),  protocol  (pro?)  or  connection
              (con?), or reset project name (prj). ? number must be 0-7.

       set dev? net [$]DEVICE [$]PORT
              Set  device (dev?) to ethernet (net) device. Device number must be between
              0-7 and port number must be between 0-65535. The DEVICE name on DOS is al‐
              ways PACKET, on other systems is the name of the adapter (e.g. eth0, nfe0,
              etc.).

       set dev? ser [$]DEVICE [$]BAUDRATE [$]DATABIT [$]PARITY [$]STOPBIT
              Set device (dev?) to serial (ser) device. Device number  must  be  between
              0-7.  The  DEVICE  name  is  the  name  of  the adapter (e.g. com1, ttyS0,
              ttyUSB0, ttyAMA0 etc.). BAUDRATE must be: 1200; 2400; 4800;  9600;  19200;
              38400;  57600  or  115200.  DATABIT  must  be 7 or 8, PARITY must be E/N/O
              (even/none/odd). STOPBIT must be 1 or 2.

       set pro? ascii|rtu [$]UID
              Set protocol (pro?) to Modbus/ASCII (ascii) or Modbus/RTU (rtu).  Unit  ID
              (UID) must be between 1-247.

       set pro? tcp [$]IP_ADDRESS
              Set  protocol (pro?) to Modbus/TCP (tcp). Address of remote device (IP_AD‐
              DRESS) must be in a.b.c.d format, with values between 1-255.

       set con? dev? pro?
              Assigns a device (dev?) and a protocol (pro?) to a  connection  (con?).  ?
              number must be 0-7.

       set prj [$]PROJECT_NAME
              Set  the  project  name. The name cannot contain spaces or special charac‐
              ters.  The project directory will also be created with this name.

   Data handler commands
       dump [[dinp|coil|ireg|hreg] [$]ADDRESS]
              Dump one page register content from ADDRESS in  binary/hexadecimal  format
              to a table.

       let dinp|coil|ireg|hreg [$]ADDRESS [$]VALUE
              Set  value  of  a register. Register start address must be between 1-9999.
              If register type is discrete input (dinp) and coil (coil), VALUE  must  be
              0/1, l/h or false/true. If it is input register (ireg) or holding register
              (hreg), VALUE must be 0-65535.

       let $VARIABLE [$]VALUE
              Set value of a variable $VARIABLE to value [$]VALUE.

       let $VARIABLE dinp|coil|ireg|hreg [$]ADDRESS
              Set value of a variable $VARIABLE from register  content.  Register  start
              address  and  must  be  between 1-9999, If register type is discrete input
              (dinp) and coil (coil), value will be 0/1, if it is input register  (ireg)
              or holding register (hreg), value of the variable will be 0-65535.

   Communication commands
       read con? dinp|coil|ireg|hreg [$]ADDRESS [ICOUNT]
              Read  one  or  more remote registers. Number of connection (con?)  must be
              between 0-7, register start ADDRESS and the COUNT must be between 1-9999.

       write con? coil|hreg [$]ADDRESS [[$]COUNT]
              Write data to one or more remote registers. Number  of  connection  (con?)
              must  be between 0-7, register start address and the count must be between
              1-9999.

       copy con? dinp|coil con? coil? [$]ADDRESS [[$]COUNT]
              Copy logical data between connections (con?). Number of connection  (con?)
              must  be between 0-7, register start ADDRESS and the COUNT must be between
              1-9999.

       copy con? ireg|hreg con? hreg? [$]ADDRESS [[$]COUNT]
              Copy numeral data between connections (con?). Number of connection  (con?)
              must  be between 0-7, register start ADDRESS and the COUNT must be between
              1-9999.

       sercons [dev?]
              Open a simple serial console. Data traffic is logged to the project direc‐
              tory named console.log. Number of device (dev?) must be between 0-7.

       serread [dev?] [$TARGET]
              Read  string from serial device to variable $TARGET or write screen.  Num‐
              ber of device (dev?) must be between 0-7.

       serwrite [dev?] $MESSAGE
              Write string to serial device from $MESSAGE.  Number of device (dev?) must
              be between 0-7.

       serwrite [dev?] "MESSAGE"
              Write  "MESSAGE" to serial device. Number of device (dev?) must be between
              0-7.

   File operation command
       The specified parameter does not contain a path, the file will be  saved  in  the
       project  directory  in the user's home directory (on DOS, in project directory in
       the program directory).

       exphis [$]PATH_AND_FILENAME
              Export command line history to a text file.

       expreg [$]PATH_AND_FILENAME dinp|coil|ireg|hreg [$]ADDRESS [[$]COUNT]
              Export content of the one or more registers to a text file in CSV, INI  or
              XML  format.  The  file format is specified by the destination file exten‐
              sion.  If the file exists, it will overwrite or append the new data.

       impreg [$]PATH_AND_FILENAME
              Import content of the one or more registers from a text file in  CSV,  INI
              or XML format. The file format is specified by the destination file exten‐
              sion.

       loadcfg [$]PATH_AND_FILENAME
              Load settings of device, protocol and connection from own format files.

       loadreg [$]PATH_AND_FILENAME
              Load all registers from own format files.

       savecfg [$]PATH_AND_FILENAME
              Save settings of device, protocol and connection to four typed files.

       savereg [$]PATH_AND_FILENAME
              Save all registers to four typed files.

EXAMPLES
   General commands
       echo   Query local echo status.

       echo on
              Enable local echo it for serial connections.

       echo hex
              Enable local echo with hexadecimal representation of the bytes.

       help   Show short description of the useable commands.

       help set
              Show usage of help command.

       pause  Wait for a key press.

       pause 5
              Wait for 5 sec.

       pause $time
              Wait for value of the $time sec.

       print $a
              Print value of the $a variable.

       print "Hello world!"
              Print 'Hello world!' message.

       var A 12
              Define $a variable and assign 12 value to it.

       var B $a
              Define $b variable and assign value of the $a.

   Logical commands
       and $result 1234 1345
              Performs AND operation with 1234 and 1345, and the  result  is  placed  in
              $result.

       or $result 1234 $b
              Performs  OR  operation with 1234 and $b, and the result is placed in $re‐
              sult.

       not $result $a
              Performs negation on 1234 and the result is placed in $result.

       shr $result $source $shift
              Shifts bits of the $source to the left by position $shift and  the  result
              is placed in $result.

   Mathematical commands
       add $result 12 13
              Adds 12 and 13, and the result is placed in $result.

       conv bin hex 1011000010110100
              Convert 45236 in binary to hex (result: B0B4).

       conv hex dec $I
              Convert value of the $I in hexadecimal to decimal.

       subs $result 12 13
              Substract 13 from 12, and the result is placed in $result.

   Configuration commands
       get dev2
              Get configuration of a device #2.

       reset prj
              Reset project name (project name will be 'default').

       set dev0 net /dev/enp0s7 502
              Set device #0 to '/dev/enp0s7' ethernet device with 502 port.

       set dev0 net /dev/enp0s7 $P
              Set device #0 to '/dev/enp0s7' ethernet device with value of the $P port.

       set dev1 ser ttyS0 9600 8 N 1
              Set  device  #1  to  /dev/ttyS0 serial device, with 9600 baud, 8 databits,
              without parity check and 1 stopbit.

       set dev1 ser COM1 9600 8 N 1
              Set device #1 to COM1 serial device, with 9600 baud, 8  databits,  without
              parity check and 1 stopbit.

       set dev1 ser $p $s $d $p $t
              Set  device  #1  to $p serial device, with $s baud, $d databits, $p parity
              check and $t stopbit.

       set pro0 ascii 100
              Set protocol #0 to Modbus/ASCII with 100 unit ID (slave).

       set pro2 tcp 192.168.100.2
              Set protocol #2 to Modbus/TCP with IP address of server.

       set con0 dev0 pro2
              Assigns a device #0 and protocol #2 to connection #0.

       set prj temp_meter
              Set the project name to 'temp_meter'.

   Data handler commands
       dump   Start dump with requesting register type and start address.

       dump hreg 1121
              Start discrete input register dump from address 1121.

       let dinp 10 1
              Set value of the discrete input register address 10 to 1.

       let dinp 10 true
              Set value of the discrete input register address 10 to 1.

       let dinp 10 H
              Set value of the discrete input register address 10 to 1.

       let ireg 10 65535
              Set value of the input register address 10 to 65535.

       let ireg $a $b
              Set value of the input register (address value of the $a) to value of  the
              $b.

       let $a ireg 100
              Set $a to input register address 100.

       let $a 10
              Set $a variable to 10.

       let $a $b
              Set $a variable to value of $b.

       print ireg 10 10
              Print value of the input register address 10 to 20.

       print ireg $a $b
              Print value of the input register address value of $a to value of $b.

   Communication commands
       read con0 hreg 100 15
              Read  remote  holding  registers  of the connection #0 from address 100 to
              115.

       read con0 hreg $a 15
              Read remote holding registers of the connection #0 from address  value  of
              the $a to $a+15.

       write con2 coil 10
              Write data from to coil address 10 of the connection #2.

       write con2 coil $c
              Write data from to coil address value of the $c of the connection #2.

       copy con0 ireg con2 hreg 210 10
              Copy  input register content of the connection #0 to holding register con‐
              tent of the connection #2 from address 210 to 220.

       copy con0 ireg con2 hreg $a $b
              Copy input register content of the connection #0 to holding register  con‐
              tent of the connection #2 from address value of the $a to $a+$b.

       sercons
              Open serial console with requesting device number.

       sercons dev0
              Open serial console with dev0 device.

       serread dev0
              Read string from dev0 device and write to screen.

       serread dev0 $target
              Read string from dev0 device and write to $target variable.

       serwrite dev0 "The quick brown fox jumps over the lazy dog."
              Write string to dev0 device.

       serwrite dev0 "$message"
              Write string from $message variable to dev0 device.

   File operation command
       exphis script
              Export command line history to project directory.

       expreg discrete_inputs.csv dinp 100 15
              Export  values  of  discrete input register from address 100 to 115 to CSV
              file.

       impreg discrete_inputs.xml
              Import values from a XML file. The target and range are determined by  the
              contents of the file.

       loadcfg test1
              Load settings of device, protocol and connection from project directory.

       loadreg /home/username/Desktop/test1
              Load all registers from other directory.

       savecfg test1
              Save settings of device, protocol and connection to project directory.

       savereg /home/username/Desktop/test1
              Save all registers to other directory.

HOTKEYS
       Commands  with function keys (F?) are executed immediately, modifier keys (ALT-?)
       only make typing easier.

       F1     help command

       F2     savecfg command

       F3     loadcfg command

       F4     savereg command

       F5     loadreg command

       F6     dump command

       F7     sercons command

       F8     cls command

       F9     echo swap command

       F10    exit command

       ALT-C  conv command

       ALT-E  expreg command

       ALT-G  get command

       ALT-I  impreg command

       ALT-L  let command

       ALT-P  print command

       ALT-R  read command

       ALT-T  reset command

       ALT-S  set command

       ALT-W  write command

ENVIRONMENTAL VARIABLES
       LANG   This is the system language on DOS and Unix-like operating systems.

       PKTDRVINT
              To access the network on DOS, the packet driver of the network card is re‐
              quired.  It uses an x86 interrupt number (INT) between 0x60 and 0x80. This
              variable tells the program this value. If there is no or it is empty, then
              the default 0x60 will be used.

FILES
       modshell.ini
              General  configuration  file  in  user's directory on Windows or Unix-like
              system or in the settings folder of the program on DOS.

       console.log
              Serial console traffic.

       scriptfiles[.bat]
              The script file is used for batch execution of ModShell commands. The com‐
              mands must be entered in the same form as if we were working in the built-
              in command line. If the first valuable character (not a space or tab) of a
              line  is  a hash, then that line is not interpreted. You can find examples
              in the documents library.

              A simple example on Unix-like OS:

              #!/usr/local/bin/modshell -r

              # Example script * use of variables
              print "Example script - How to use variables?"
              print "--------------------------------------------"
              var a 24
              var b
              var c
              let $b 2
               (...)
              print "The sum of $A and $B:"
              print "--------------------------------------------"

              A simple example on DOS and Windows OS:

              @modshell.exe -r %0
              @goto :eof

              # Example script * use of variables
              print "Example script - How to use variables?"
              print "--------------------------------------------"
              var a 24
              var b
              var c
              let $b 2
               (...)
              print "The sum of $A and $B:"
              print "--------------------------------------------"

              :eof

       *.DDT  Saved device setting in typed file with seven TDevice type values.
              type TDevice = record
                     valid: boolean;     // settings validity: false|true
                     devtype: byte;      // type of device: 0..1 -> see DEV_TYPE
                     device: string[15]; // device: /dev/ttySx, COMx, /dev/eth0 etc.
                     port: word;         // ethernet port: 0-65535
                     speed: byte;        // serial speed: 0..7 -> see DEV_SPEED
                     databit: byte;      // serial databits: 7|8
                     parity: byte;       // serial parity: 0..2 -> see DEV_PARITY
                     stopbit: byte;      // serial stopbit: 1|2
                   end;

       *.PDT  Saved protocol setting in typed file with seven TProtocol type values.
              type TProtocol = record
                     valid: boolean;        // settings validity: false|true
                     prottype: byte;        // type of protocol: 0..2 -> see PROT_TYPE
                     ipaddress: string[15]; // IP address in a.b.c.d format
                     uid: integer;          // Modbus Unit ID: 1..247
                   end;

       *.CDT  Saved connection setting in typed file with seven TConnection type values.
              type TConnection = record
                     valid: boolean;        // settings validity: false|true
                     dev: byte;             // assigned device: 0..7
                     prot: byte;            // assigned protocol: 0..7
                   end;

       *.BDT  Saved boolean type register values in typed file with 2x9999 boolean  val‐
              ues.

       *.WDT  Saved word type register values in typed file with 2x9999 word values.

       *.CSV  Exported  boolean or word type register values in CSV text file. Cannot be
              imported.  Internal structure:
                dinp,1,0
                    ...
                dinp,9999,1
                coil,1,0
                    ...
                coil,9999,1
                ireg,1,102
                    ...
                ireg,9999,33332
                hreg,1,5342
                    ...
                hreg,9999,12

       *.INI  Exported register values in INI text file in this structure:
                [dinp]
                addr_1=0
                  ...
                addr_9999=1

                [coil]
                addr_1=0
                  ...
                addr_9999=1

                [ireg]
                addr_1=102
                  ...
                addr_9999=33332

                [hreg]
                addr_1=5342
                  ...
                addr_9999=12

       *.XML  Exported register values in XML text file in this structure:
                <?xml version="1.0" encoding="utf-8"?>
                <xml>
                  <dinp>
                    <reg addr="1">0</reg>
                            ...
                    <reg addr="9999">1</reg>
                  </dinp>
                  <coil>
                    <reg addr="1">0</reg>
                            ...
                    <reg addr="9999">1</reg>
                  </coil>
                  <ireg>
                    <reg addr="1">102</reg>
                            ...
                    <reg addr="33332">1</reg>
                  </ireg>
                  <hreg>
                    <reg addr="1">5342</reg>
                            ...
                    <reg addr="33332">12</reg>
                  </hreg>
                </xml>

EXIT STATUS
       0      Normal exit.

       1      Terminal size is smaller than 80x25 characters.

       2      The specified script file does not exist.

       3      The specified script file cannot be loaded.

       4      Script buffer is full.

HOMEPAGE
       ⟨http://www.pozsarzs.hu⟩

       ⟨https://github.com/pozsarzs/modshell⟩

SEE ALSO
       Files in document or /usr/share/doc/modshell/ folder (or equivalent on your  sys‐
       tem).
AUTHOR
       Pozsar Zsolt ⟨pozsarzs@gmail.com⟩

                                    2023 December 20                         ModShell(1)
